A grid n x m, * means you can go over it, # means it's blocked. you can go left, up, down, right.
what is the shortest distance between x1,y1 to x2,y2, answer -1 if impossible

#include<bits/stdc++.h>
using namespace std;
using ll=long long;

#define   pb     push_back
#define   pi     acos(-1)
#define   yes    cout<< "YES" <<endl
#define   no     cout<< "NO" <<endl
#define   endl   "\n"
#define   pii    pair<int,int>

const int mx=30;
char g[mx][mx];
bool vis[mx][mx];
int dis[mx][mx];
int r,c;

int dx[]={1,-1,0,0};
int dy[]={0,0,1,-1};
bool valid(int x,int y){
	return (x>=0 && x<r && y>=0 &&y<c);
}
void bfs(int sx,int sy){

    memset(vis,0,sizeof vis);

	queue<pii>q;
	q.push(pii(sx,sy));
	vis[sx][sy]=true;
	dis[sx][sy]=0;

	while(!q.empty()){
		pii p=q.front();
		q.pop();
		for(int i=0;i<4;i++){
			int x=p.first+dx[i];
			int y=p.second+dy[i];
			if(valid(x,y) && g[x][y]=='.' && !vis[x][y] ){
				q.push(pii(x,y));
				vis[x][y]=true;
				dis[x][y]=dis[p.first][p.second]+1;
			}
		}
	}
}


int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    freopen("input.txt","r",stdin);  freopen("output.txt","w",stdout);

    cin>>r>>c;
    for(int i=0;i<r;i++){
    	for(int j=0;j<c;j++){
    		cin>>g[i][j];
    	}
    }

    int x1,y1,x2,y2;
    cin>>x1>>y1>>x2>>y2;

    bfs(x1,y1);
    for(int i=0;i<r;i++){
    	for(int j=0;j<c;j++){
    		cout<<vis[i][j];
    	}
    	cout<<endl;
    }
    if(dis[x2][y2]==0) cout<<-1<<endl;
    else cout<<dis[x2][y2]<<endl;
}
